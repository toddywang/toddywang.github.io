<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小T在加油</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://toddy.wang/"/>
  <updated>2017-11-14T12:00:46.000Z</updated>
  <id>http://toddy.wang/</id>
  
  <author>
    <name>Toddy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>express参数过滤</title>
    <link href="http://toddy.wang/2017/11/14/1.%5Breading%5Dexpress%E5%8F%82%E6%95%B0%E8%BF%87%E6%BB%A4/"/>
    <id>http://toddy.wang/2017/11/14/1.[reading]express参数过滤/</id>
    <published>2017-11-14T09:05:50.000Z</published>
    <updated>2017-11-14T12:00:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="express-介绍"><a href="#express-介绍" class="headerlink" title="express 介绍"></a>express 介绍</h2><blockquote><p>Express 是一个基于 Node.js 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。</p></blockquote><h2 id="简单说下参数安全"><a href="#简单说下参数安全" class="headerlink" title="简单说下参数安全"></a>简单说下参数安全</h2><blockquote><p>今天说下，参数过滤，我们结果对外暴露的所有接口参数，我们需要在request接收的时候，进行参数校验，说白一点，不管是入参还是出参，我们都得做好统一处理。</p></blockquote><p>今天我来在express里面来给大家讲下如何实现参数校验。<br>1.首先我们定义一个路由<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">index.js</div><div class="line"></div><div class="line">module.exports = app =&gt; &#123;</div><div class="line">    app.use(<span class="string">'/validateData'</span>, validate);</div><div class="line"></div><div class="line">    app.use(<span class="string">'/'</span>, page);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">route.js</div><div class="line"></div><div class="line">var express = require(<span class="string">'express'</span>);</div><div class="line">var router = express.Router();</div><div class="line">var validate = require(<span class="string">'../controller/common/validate'</span>);</div><div class="line">var apiWrapperReq = require(<span class="string">'../middleware/apiWrapperReq'</span>);</div><div class="line"></div><div class="line">router.get(<span class="string">'/'</span>, apiWrapperReq.wrapperReq, validate.fetch);</div><div class="line"></div><div class="line">module.exports = router;</div></pre></td></tr></table></figure></p><p>2.我们需要给路由一个中间件。来控制参数，这里地方的apiwrapperReq里面需要做好处理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">// 校验类型</div><div class="line">validate(rules, params) &#123;</div><div class="line">    <span class="built_in">let</span> result = &#123; ret: <span class="literal">true</span>, msg: [], data: &#123;&#125; &#125;;</div><div class="line">    <span class="built_in">let</span> msg = [];</div><div class="line">    <span class="keyword">if</span> (!params) &#123;</div><div class="line">        <span class="built_in">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    _.each(rules, (<span class="built_in">type</span>, key) =&gt; &#123;</div><div class="line">        <span class="built_in">let</span> key_rule = typeof <span class="built_in">type</span> === <span class="string">'object'</span> ? <span class="built_in">type</span> : &#123; <span class="built_in">type</span> &#125;;</div><div class="line">        <span class="built_in">let</span> val = params[key];</div><div class="line"></div><div class="line">        // 是否必须</div><div class="line">        <span class="built_in">let</span> required = key_rule.required &amp;&amp; key_rule.required === <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span> (required &amp;&amp; undefined === val) &#123;</div><div class="line">            msg.push(`param <span class="variable">$&#123;key&#125;</span> is required!`);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 转换类型,这里可以过滤非法字符，后面加入正则过滤</div><div class="line">        <span class="keyword">if</span> (undefined !== val &amp;&amp; val) &#123;</div><div class="line">            try &#123;</div><div class="line">                // 检查参数数据正则表达式的健壮性</div><div class="line">                <span class="keyword">if</span> (!safe(val)) &#123;</div><div class="line">                    msg.push(`param <span class="variable">$&#123;key&#125;</span> is no no no!`);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                // 转换一下。转换失败，不通过。</div><div class="line">                params[key] = this.convertType(val, key_rule);</div><div class="line">            &#125; catch (ex) &#123;</div><div class="line">                msg.push(`param <span class="variable">$&#123;key&#125;</span> is error!`);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="built_in">return</span> &#123;</div><div class="line">        ret: msg.length === 0,</div><div class="line">        msg: msg,</div><div class="line">        data: params</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>3.上面的接受了2个参数，一个是rules，一个params。我们需要获取一个rules。对应每一个接口都得有一个rules。下面我们整理下规则的参数</p><blockquote><p>我们需要对参数是否必须填写和参数的类型进行转换。这样保证我们的参数合法性。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">    queryA: &#123;</div><div class="line">        required: <span class="literal">true</span>,</div><div class="line">        <span class="built_in">type</span>: <span class="string">'string'</span></div><div class="line">    &#125;,</div><div class="line">    queryB: &#123;</div><div class="line">        required: <span class="literal">true</span>,</div><div class="line">        <span class="built_in">type</span>: <span class="string">'int'</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>按照上述步骤去走我们的流程，判断下有校验规则的才走逻辑。不然跳过。我们知道做这个目的是，过滤一些正则表达式的攻击，防止参数中含有正则表达式的一些进行攻击数据库。简单的做一层。如果你觉得你的正则表达式不是很优雅，可以采用第三方库（safe-regex).来帮你你完成。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;express-介绍&quot;&gt;&lt;a href=&quot;#express-介绍&quot; class=&quot;headerlink&quot; title=&quot;express 介绍&quot;&gt;&lt;/a&gt;express 介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Express 是一个基于 Node.js 平台的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>为什么每天学习一点算法</title>
    <link href="http://toddy.wang/2017/11/07/2.%5B%E7%AE%97%E6%B3%95%5D%E4%B8%BA%E4%BB%80%E4%B9%88%E6%AF%8F%E5%A4%A9%E5%AD%A6%E4%B9%A0%E4%B8%80%E7%82%B9%E7%AE%97%E6%B3%95/"/>
    <id>http://toddy.wang/2017/11/07/2.[算法]为什么每天学习一点算法/</id>
    <published>2017-11-07T07:47:48.000Z</published>
    <updated>2017-11-07T08:09:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么算法？"><a href="#为什么算法？" class="headerlink" title="为什么算法？"></a>为什么算法？</h2><blockquote><p>大家都知道，作为前端工程师，那么传统类型的前端，大家都认为的是只需要简单的写一些页面，和页面交互就可以完成的工作，但是，近几年对前端工程师的热度越来越高，对前端的要求也越来越高，很多时候前端需要完成更加复杂的交互和业务功能。<br>前端工程师也在成长，这些年推出了很多模块化，组件化，当然前端的开发工程也不是之前的html和css以及js那么简单的，注入了工程化东西。gulp,webpack都是来打包和编译我们的js和前端工程的。<br>css也有了预处理语言，scss和less大家应该不会陌生。<br>。。。<br>其他前端这几年的框架也很多这里不去论述框架，react/vue。</p></blockquote><h2 id="算法重要吗？"><a href="#算法重要吗？" class="headerlink" title="算法重要吗？"></a>算法重要吗？</h2><blockquote><p>我们在开发前端的时候，开始使用后端语言，node.js成为了前端工程师的首选，当然很多公司也在用java，php，甚至很多大型互联网公司还在用C#，所以，这个时候的前端算法就体现的很重要。<br>大部分前端工程师，因为这几年的热门，通过培训机构出来，甚至其他专业转过来，对计算机软件的思维理解不够深入，当然前端上手很容易，成为了他们的首选。</p></blockquote><h2 id="每天学习一点算法"><a href="#每天学习一点算法" class="headerlink" title="每天学习一点算法"></a>每天学习一点算法</h2><blockquote><p>笔者大学软件工程专业出身，在学校的时候已经开始和老师同学开始项目开发，java、php、c#、node.js都有实际的项目开发经验，当然前端的开发浪潮本人也身在其中。<br>当然前端只是完成现有的功能也是可以的，如果你要想做一个好的前端工程师，你得好好学习算法，笔者也是专业出身，现在对算法也是很多不懂，所以，今天开始，会同大家一起每天学习一点算法，同事记录笔记。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么算法？&quot;&gt;&lt;a href=&quot;#为什么算法？&quot; class=&quot;headerlink&quot; title=&quot;为什么算法？&quot;&gt;&lt;/a&gt;为什么算法？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;大家都知道，作为前端工程师，那么传统类型的前端，大家都认为的是只需要简单的写一些页
      
    
    </summary>
    
    
      <category term="学习一点算法" scheme="http://toddy.wang/tags/%E5%AD%A6%E4%B9%A0%E4%B8%80%E7%82%B9%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>每天学习一点算法</title>
    <link href="http://toddy.wang/2017/11/07/2.%5B%E7%AE%97%E6%B3%95%5D%E6%AF%8F%E5%A4%A9%E5%AD%A6%E4%B9%A0%E4%B8%80%E7%82%B9%E7%AE%97%E6%B3%95/"/>
    <id>http://toddy.wang/2017/11/07/2.[算法]每天学习一点算法/</id>
    <published>2017-11-07T07:46:13.000Z</published>
    <updated>2017-11-07T08:06:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>目录</p><ul><li><a href="/2017/11/07/2.[算法]为什么每天学习一点算法">为什么每天学一点算法</a></li><li>…</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2017/11/07/2.[算法]为什么每天学习一点算法&quot;&gt;为什么每天学一点算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
      <category term="学习一点算法" scheme="http://toddy.wang/tags/%E5%AD%A6%E4%B9%A0%E4%B8%80%E7%82%B9%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>es6读书笔记</title>
    <link href="http://toddy.wang/2017/11/07/1.%5Breading%5Des6%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://toddy.wang/2017/11/07/1.[reading]es6读书笔记/</id>
    <published>2017-11-07T07:40:53.000Z</published>
    <updated>2017-11-07T07:52:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="es6读书笔记"><a href="#es6读书笔记" class="headerlink" title="es6读书笔记"></a>es6读书笔记</h2><blockquote><p>本文主要学习和复习es6，学习同时会对lodash.js进行分析.感谢<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">阮一峰老师</a></p></blockquote><h2 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a>Promise 对象</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;es6读书笔记&quot;&gt;&lt;a href=&quot;#es6读书笔记&quot; class=&quot;headerlink&quot; title=&quot;es6读书笔记&quot;&gt;&lt;/a&gt;es6读书笔记&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;本文主要学习和复习es6，学习同时会对lodash.js进行分析.感谢&lt;a
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://toddy.wang/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>webpack简单介绍</title>
    <link href="http://toddy.wang/2017/11/07/1.%5Breading%5Dwebpack%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://toddy.wang/2017/11/07/1.[reading]webpack简单介绍/</id>
    <published>2017-11-07T03:59:12.000Z</published>
    <updated>2017-11-07T07:52:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack简介"><a href="#webpack简介" class="headerlink" title="webpack简介"></a>webpack简介</h2><h3 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h3><p>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。</p><h3 id="为什么webpack？"><a href="#为什么webpack？" class="headerlink" title="为什么webpack？"></a>为什么webpack？</h3><p>现今的很多网页其实可以看做是功能丰富的应用，它们拥有着复杂的JavaScript代码和一大堆依赖包。为了简化开发的复杂度，前端社区涌现出了很多好的实践方法</p><p>模块化，让我们可以把复杂的程序细化为小的文件;<br>类似于TypeScript这种在JavaScript基础上拓展的开发语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能转换为JavaScript文件使浏览器可以识别；<br>Scss，less等CSS预处理器<br>…<br>这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别,而手动处理又是非常繁琐的，这就为WebPack类的工具的出现提供了需求。</p><h2 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h2><h2 id="webpack插件"><a href="#webpack插件" class="headerlink" title="webpack插件"></a>webpack插件</h2><h2 id="webpack插件编写"><a href="#webpack插件编写" class="headerlink" title="webpack插件编写"></a>webpack插件编写</h2><h2 id="webpack2-amp-amp-webpack3？"><a href="#webpack2-amp-amp-webpack3？" class="headerlink" title="webpack2&amp; &amp; webpack3？"></a>webpack2&amp; &amp; webpack3？</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;webpack简介&quot;&gt;&lt;a href=&quot;#webpack简介&quot; class=&quot;headerlink&quot; title=&quot;webpack简介&quot;&gt;&lt;/a&gt;webpack简介&lt;/h2&gt;&lt;h3 id=&quot;什么是webpack&quot;&gt;&lt;a href=&quot;#什么是webpack&quot; cla
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://toddy.wang/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>yield</title>
    <link href="http://toddy.wang/2017/11/07/1.%5Breading%5Dyield/"/>
    <id>http://toddy.wang/2017/11/07/1.[reading]yield/</id>
    <published>2017-11-07T03:57:57.000Z</published>
    <updated>2017-11-07T07:52:33.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://toddy.wang/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>node简单防刷</title>
    <link href="http://toddy.wang/2017/11/06/1.%5Breading%5Dnode%E7%AE%80%E5%8D%95%E9%98%B2%E5%88%B7/"/>
    <id>http://toddy.wang/2017/11/06/1.[reading]node简单防刷/</id>
    <published>2017-11-06T12:51:29.000Z</published>
    <updated>2017-11-07T07:52:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单的安全防范"><a href="#简单的安全防范" class="headerlink" title="简单的安全防范"></a>简单的安全防范</h2><p>web时代的今天，我们经常会暴露一些接口给外网，但是很多作为前端工程师，也是需要在互联网的今天做一点攻防。不能直接让人直接访问你的接口，所以，本篇文章主要简单的介绍下。如何的简单的实现防刷。</p><p>文章主要采用node.js作为介绍。</p><p>首先，我们理解下，一个接口没有任何防刷。你只需要打开浏览器，直接找到对应的接口，直接刷新就可以直接搞定接口。这样我们的风险还是很高的。让刷的难度稍微高一点。</p><p>最简单的做法就是，Token验证和访问限制。</p><p>1.我们需要server端生成一段随机数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">injectAccessToken(req, res, next) &#123;</div><div class="line">    req._access_token = Math.random().toString(26).slice(2);</div><div class="line">    next();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2.把Token注入到页面中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">webInject:function(html,token,callback)&#123;</div><div class="line">    var htmlEndIndex = html.indexOf(&apos;&lt;/html&gt;&apos;);</div><div class="line">    var tokenScript = &apos;&lt;script&gt;window.&apos; + this.config.webTokenVarName + &apos;=&apos; + token + &apos;&lt;/script&gt;&apos;;</div><div class="line">    var prevHtml = html.substring(0, htmlEndIndex);</div><div class="line">    var nextHtml = html.substr(htmlEndIndex);</div><div class="line">    prevHtml += tokenScript;</div><div class="line">    prevHtml += nextHtml;</div><div class="line">    callback(null, prevHtml);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>3.页面请求把Token带回来</p><blockquote><p>页面请求带着自定义的Token回传，注意，这个地方可以自己实现一些算法和混淆的东西。我这里提供一个东西。就是通过字符串拆分，把生成的Token放在html中，获取的时候也是随机的。达到每次获取都不一样。<br>记住标签随机，id值随机生成，在server端输出给html。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">&lt;samp id=<span class="string">"_CWXF0"</span> style=<span class="string">"display:none;"</span>&gt;f&lt;/samp&gt;</div><div class="line">&lt;i id=<span class="string">"_CWXF1"</span> style=<span class="string">"display:none;"</span>&gt;k&lt;/i&gt;</div><div class="line">&lt;sub id=<span class="string">"_CWXF2"</span> style=<span class="string">"display:none;"</span>&gt;2&lt;/sub&gt;</div><div class="line">&lt;tt id=<span class="string">"_CWXF3"</span> style=<span class="string">"display:none;"</span>&gt;d&lt;/tt&gt;</div><div class="line">&lt;bdo id=<span class="string">"_CWXF4"</span> style=<span class="string">"display:none;"</span>&gt;f&lt;/bdo&gt;</div><div class="line">&lt;b id=<span class="string">"_CWXF5"</span> style=<span class="string">"display:none;"</span>&gt;d&lt;/b&gt;</div><div class="line">&lt;cite id=<span class="string">"_CWXF6"</span> style=<span class="string">"display:none;"</span>&gt;7&lt;/cite&gt;</div><div class="line">&lt;tt id=<span class="string">"_CWXF7"</span> style=<span class="string">"display:none;"</span>&gt;b&lt;/tt&gt;</div><div class="line">&lt;code id=<span class="string">"_CWXF8"</span> style=<span class="string">"display:none;"</span>&gt;e&lt;/code&gt;</div><div class="line">&lt;dfn id=<span class="string">"_CWXF9"</span> style=<span class="string">"display:none;"</span>&gt;g&lt;/dfn&gt;</div><div class="line">&lt;time id=<span class="string">"_CWXF10"</span> style=<span class="string">"display:none;"</span>&gt;3&lt;/time&gt;</div><div class="line">&lt;code id=<span class="string">"_CWXF11"</span> style=<span class="string">"display:none;"</span>&gt;8&lt;/code&gt;</div><div class="line">&lt;sub id=<span class="string">"_CWXF12"</span> style=<span class="string">"display:none;"</span>&gt;1&lt;/sub&gt;</div><div class="line">&lt;code id=<span class="string">"_CWXF13"</span> style=<span class="string">"display:none;"</span>&gt;a&lt;/code&gt;</div><div class="line">&lt;em id=<span class="string">"_CWXF14"</span> style=<span class="string">"display:none;"</span>&gt;o&lt;/em&gt;</div><div class="line">&lt;bdo id=<span class="string">"_CWXF15"</span> style=<span class="string">"display:none;"</span>&gt;b&lt;/bdo&gt;</div><div class="line">&lt;i id=<span class="string">"_CWXF16"</span> style=<span class="string">"display:none;"</span>&gt;d&lt;/i&gt;</div><div class="line">&lt;i id=<span class="string">"_CWXF17"</span> style=<span class="string">"display:none;"</span>&gt;e&lt;/i&gt;</div><div class="line">&lt;sup id=<span class="string">"_CWXF18"</span> style=<span class="string">"display:none;"</span>&gt;j&lt;/sup&gt;</div><div class="line">&lt;small id=<span class="string">"_CWXF19"</span> style=<span class="string">"display:none;"</span>&gt;9&lt;/small&gt;</div><div class="line">&lt;code id=<span class="string">"_CWXF20"</span> style=<span class="string">"display:none;"</span>&gt;m&lt;/code&gt;</div><div class="line">&lt;em id=<span class="string">"_CWXF21"</span> style=<span class="string">"display:none;"</span>&gt;4&lt;/em&gt;</div><div class="line">&lt;small id=<span class="string">"_CWXF22"</span> style=<span class="string">"display:none;"</span>&gt;9&lt;/small&gt;</div><div class="line">&lt;cite id=<span class="string">"_CWXF23"</span> style=<span class="string">"display:none;"</span>&gt;c&lt;/cite&gt;</div><div class="line">&lt;abbr id=<span class="string">"_CWXF24"</span> style=<span class="string">"display:none;"</span>&gt;g&lt;/abbr&gt;</div><div class="line">&lt;tt id=<span class="string">"_CWXF25"</span> style=<span class="string">"display:none;"</span>&gt;5&lt;/tt&gt;</div><div class="line">&lt;code id=<span class="string">"_CWXF26"</span> style=<span class="string">"display:none;"</span>&gt;h&lt;/code&gt;</div><div class="line">&lt;sup id=<span class="string">"_CWXF27"</span> style=<span class="string">"display:none;"</span>&gt;6&lt;/sup&gt;</div><div class="line">&lt;sub id=<span class="string">"_CWXF28"</span> style=<span class="string">"display:none;"</span>&gt;5&lt;/sub&gt;</div><div class="line">&lt;span id=<span class="string">"_CWXF29"</span> style=<span class="string">"display:none;"</span>&gt;f&lt;/span&gt;</div><div class="line">&lt;sup id=<span class="string">"_CWXF30"</span> style=<span class="string">"display:none;"</span>&gt;0&lt;/sup&gt;</div><div class="line">&lt;i id=<span class="string">"_CWXF31"</span> style=<span class="string">"display:none;"</span>&gt;3&lt;/i&gt;</div><div class="line">&lt;label id=<span class="string">"_CWXF32"</span> style=<span class="string">"display:none;"</span>&gt;7&lt;/label&gt;</div><div class="line">&lt;span id=<span class="string">"_CWXF33"</span> style=<span class="string">"display:none;"</span>&gt;e&lt;/span&gt;</div><div class="line">&lt;code id=<span class="string">"_CWXF34"</span> style=<span class="string">"display:none;"</span>&gt;9&lt;/code&gt;</div><div class="line">&lt;label id=<span class="string">"_CWXF35"</span> style=<span class="string">"display:none;"</span>&gt;6&lt;/label&gt;</div><div class="line">&lt;bdo id=<span class="string">"_CWXF36"</span> style=<span class="string">"display:none;"</span>&gt;3&lt;/bdo&gt;</div><div class="line">&lt;code id=<span class="string">"_CWXF37"</span> style=<span class="string">"display:none;"</span>&gt;b&lt;/code&gt;</div><div class="line">&lt;cite id=<span class="string">"_CWXF38"</span> style=<span class="string">"display:none;"</span>&gt;3&lt;/cite&gt;</div><div class="line">&lt;acronym id=<span class="string">"_CWXF39"</span> style=<span class="string">"display:none;"</span>&gt;3&lt;/acronym&gt;</div><div class="line">&lt;sub id=<span class="string">"_CWXF40"</span> style=<span class="string">"display:none;"</span>&gt;m&lt;/sub&gt;</div><div class="line">&lt;dfn id=<span class="string">"_CWXF41"</span> style=<span class="string">"display:none;"</span>&gt;8&lt;/dfn&gt;</div><div class="line">&lt;map id=<span class="string">"_CWXF42"</span> style=<span class="string">"display:none;"</span>&gt;o&lt;/map&gt;</div><div class="line">&lt;strong id=<span class="string">"_CWXF43"</span> style=<span class="string">"display:none;"</span>&gt;9&lt;/strong&gt;</div><div class="line">&lt;sup id=<span class="string">"_CWXF44"</span> style=<span class="string">"display:none;"</span>&gt;j&lt;/sup&gt;</div><div class="line">&lt;em id=<span class="string">"_CWXF45"</span> style=<span class="string">"display:none;"</span>&gt;d&lt;/em&gt;</div><div class="line">&lt;script&gt;</div><div class="line">(<span class="keyword">function</span>(w)&#123;</div><div class="line">    var r = <span class="string">""</span>;</div><div class="line">    <span class="keyword">function</span> g(id)&#123;</div><div class="line">        <span class="built_in">return</span> document.getElementById(id).innerHTML;</div><div class="line">    &#125;</div><div class="line">    r += g(<span class="string">"_CWXF0"</span>);r += g(<span class="string">"_CWXF1"</span>);r += g(<span class="string">"_CWXF2"</span>);r += g(<span class="string">"_CWXF3"</span>);</div><div class="line">    r += g(<span class="string">"_CWXF4"</span>);r += g(<span class="string">"_CWXF5"</span>);r += g(<span class="string">"_CWXF6"</span>);r += g(<span class="string">"_CWXF7"</span>);</div><div class="line">    r += g(<span class="string">"_CWXF8"</span>);r += g(<span class="string">"_CWXF9"</span>);r += g(<span class="string">"_CWXF10"</span>);r += g(<span class="string">"_CWXF11"</span>);</div><div class="line">    r += g(<span class="string">"_CWXF12"</span>);r += g(<span class="string">"_CWXF13"</span>);r += g(<span class="string">"_CWXF14"</span>);r += g(<span class="string">"_CWXF15"</span>);</div><div class="line">    r += g(<span class="string">"_CWXF16"</span>);r += g(<span class="string">"_CWXF17"</span>);r += g(<span class="string">"_CWXF18"</span>);r += g(<span class="string">"_CWXF19"</span>);</div><div class="line">    r += g(<span class="string">"_CWXF20"</span>);r += g(<span class="string">"_CWXF21"</span>);r += g(<span class="string">"_CWXF22"</span>);r += g(<span class="string">"_CWXF23"</span>);</div><div class="line">    r += g(<span class="string">"_CWXF24"</span>);r += g(<span class="string">"_CWXF25"</span>);r += g(<span class="string">"_CWXF26"</span>);r += g(<span class="string">"_CWXF27"</span>);</div><div class="line">    r += g(<span class="string">"_CWXF28"</span>);r += g(<span class="string">"_CWXF29"</span>);r += g(<span class="string">"_CWXF30"</span>);r += g(<span class="string">"_CWXF31"</span>);</div><div class="line">    r += g(<span class="string">"_CWXF32"</span>);r += g(<span class="string">"_CWXF33"</span>);r += g(<span class="string">"_CWXF34"</span>);r += g(<span class="string">"_CWXF35"</span>);</div><div class="line">    r += g(<span class="string">"_CWXF36"</span>);r += g(<span class="string">"_CWXF37"</span>);r += g(<span class="string">"_CWXF38"</span>);r += g(<span class="string">"_CWXF39"</span>);</div><div class="line">    r += g(<span class="string">"_CWXF40"</span>);r += g(<span class="string">"_CWXF41"</span>);r += g(<span class="string">"_CWXF42"</span>);r += g(<span class="string">"_CWXF43"</span>);</div><div class="line">    r += g(<span class="string">"_CWXF44"</span>);r += g(<span class="string">"_CWXF45"</span>);</div><div class="line">    w.tokenName=r;</div><div class="line">&#125;)(window)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>4.校验token是否合法</p><blockquote><p>在路由的地方加入拦截器，达到获取Token的目的，这里为了统一处理前端，建议放在header中，传递，你可以在前端统一封装的ajax处统一处理，以达到不影响业务代码的目的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">verifyToken(req, res, next) &#123;</div><div class="line">    <span class="keyword">if</span> (req.headers[<span class="string">'token_fe'</span>]) &#123;</div><div class="line">        next();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        res.jsonp(&#123;</div><div class="line">            code: -1,</div><div class="line">            ret: <span class="literal">false</span>,</div><div class="line">            msg: <span class="string">'access not vaildate'</span></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p></blockquote><p>这样就实现了最简单的Token防刷,当然重要的是，你可以把token放在内存中，内存中加入过期时间，和有效的规则，比如，一分钟这个Token请求多少次。就不能再次请求等。可以可以注入IP，以IP的模式来校验不能多次请求。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简单的安全防范&quot;&gt;&lt;a href=&quot;#简单的安全防范&quot; class=&quot;headerlink&quot; title=&quot;简单的安全防范&quot;&gt;&lt;/a&gt;简单的安全防范&lt;/h2&gt;&lt;p&gt;web时代的今天，我们经常会暴露一些接口给外网，但是很多作为前端工程师，也是需要在互联网的今天做一点
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://toddy.wang/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记</title>
    <link href="http://toddy.wang/2017/11/06/1.%5Breading%5Ddev-reading/"/>
    <id>http://toddy.wang/2017/11/06/1.[reading]dev-reading/</id>
    <published>2017-11-06T12:50:45.000Z</published>
    <updated>2017-11-14T09:10:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h1><p>前端实用的技术整理笔记</p><p>目录</p><ul><li>es6读书笔记</li><li><a href="/2017/11/06/1.[reading]node简单防刷">node简单的安全防刷</a></li><li><a href="/2017/11/14/1.[reading]express参数过滤">node参数过滤</a></li><li>javascript设计模式</li><li><a href="/2017/11/07/1.[reading]yield">yield &amp; yield*</a></li><li><a href="/2017/11/07/1.[reading]webpack简单介绍">webpack &amp;&amp; webpack3</a></li><li>babel</li><li>express</li><li>koa &amp; koa2</li><li>vsc工具</li><li>如何完成前端面试</li><li>…</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;读书笔记&quot;&gt;&lt;a href=&quot;#读书笔记&quot; class=&quot;headerlink&quot; title=&quot;读书笔记&quot;&gt;&lt;/a&gt;读书笔记&lt;/h1&gt;&lt;p&gt;前端实用的技术整理笔记&lt;/p&gt;
&lt;p&gt;目录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;es6读书笔记&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://toddy.wang/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>如何快熟悉去哪儿前端团队</title>
    <link href="http://toddy.wang/2017/10/30/%E5%A6%82%E4%BD%95%E5%BF%AB%E7%86%9F%E6%82%89%E5%8E%BB%E5%93%AA%E5%84%BF%E5%89%8D%E7%AB%AF%E5%9B%A2%E9%98%9F/"/>
    <id>http://toddy.wang/2017/10/30/如何快熟悉去哪儿前端团队/</id>
    <published>2017-10-30T11:15:25.000Z</published>
    <updated>2017-11-06T12:49:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一印象"><a href="#第一印象" class="headerlink" title="第一印象"></a>第一印象</h2><p>就和相亲一样，第一印象还是很重要的，团队很年轻，很有活力。基本90后为主，不乏很多应届生。</p><h2 id="团队秘籍"><a href="#团队秘籍" class="headerlink" title="团队秘籍"></a>团队秘籍</h2><p>下面我来给大家整理一份入职去哪儿前端团队的必经之路，有我的这份文档，相信你能够对这个团队更加快速的熟悉起来。</p><blockquote><p><a href="http://www.qunar.it" target="_blank" rel="external">骆驼帮</a>（当然得内网你才能登陆）<br>很多公司都有的一款集大成的知识库，里面可以让你开始的熟悉公司的制度和开发wiki</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一印象&quot;&gt;&lt;a href=&quot;#第一印象&quot; class=&quot;headerlink&quot; title=&quot;第一印象&quot;&gt;&lt;/a&gt;第一印象&lt;/h2&gt;&lt;p&gt;就和相亲一样，第一印象还是很重要的，团队很年轻，很有活力。基本90后为主，不乏很多应届生。&lt;/p&gt;
&lt;h2 id=&quot;团队秘籍
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://toddy.wang/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Babel 介绍</title>
    <link href="http://toddy.wang/2017/10/27/2017-10-27-babel-%E7%AE%80%E4%BB%8B/"/>
    <id>http://toddy.wang/2017/10/27/2017-10-27-babel-简介/</id>
    <published>2017-10-27T10:37:05.000Z</published>
    <updated>2017-10-30T11:07:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Babel是什么？"><a href="#Babel是什么？" class="headerlink" title="Babel是什么？"></a>Babel是什么？</h2><blockquote><p>ECMAScript 6 是一个泛指，含义是5.1版本后的JavaScript的下一代标准，涵盖了ES2015, ES2016, ES2017等。<br>Babel转码器是一个广泛使用的ES6转码器，可以将ES6转码为ES5。<br>简单来说，Babel 用于转化你的 JavaScript 代码。</p></blockquote><h2 id="Babel-功能介绍"><a href="#Babel-功能介绍" class="headerlink" title="Babel 功能介绍"></a>Babel 功能介绍</h2><blockquote><p>Babel 是一个转换编译器，它能将 ES6 转换成可以在浏览器中运行的代码。Babel 可以处理 ES6 的所有新语法，并且内置了 React JSX 扩展及 Flow 类型注解支持。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">|:-------------------------:|:--------------------------:|</div><div class="line">| Arrow functions           | Function bind              |</div><div class="line">| Async functions           | Generators                 |</div><div class="line">| Async generator functions | Modules                    |</div><div class="line">| Block scoping             | Module export extensions   |</div><div class="line">| Block scoped functions    | New literals               |</div><div class="line">| Classes                   | Object rest/spread         |</div><div class="line">| Class properties          | Property method assignment |</div><div class="line">| Computed property names   | Property name shorthand    |</div><div class="line">| Constants                 | Rest parameters            |</div><div class="line">| Decorators                | Spread                     |</div><div class="line">| Default parameters        | Sticky regex               |</div><div class="line">| Destructuring             | Template literals          |</div><div class="line">| Do expressions            | Trailing function commas   |</div><div class="line">| Exponentiation operator   | Type annotations           |</div><div class="line">| For-of                    | Unicode regex              |</div><div class="line">|:-------------------------:|:--------------------------:|</div></pre></td></tr></table></figure><p>官网地址：<a href="http://babeljs.io/" target="_blank" rel="external">http://babeljs.io/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Babel是什么？&quot;&gt;&lt;a href=&quot;#Babel是什么？&quot; class=&quot;headerlink&quot; title=&quot;Babel是什么？&quot;&gt;&lt;/a&gt;Babel是什么？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ECMAScript 6 是一个泛指，含义是5.1版本后的
      
    
    </summary>
    
    
      <category term="技术文档" scheme="http://toddy.wang/tags/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>localstorage</title>
    <link href="http://toddy.wang/2016/07/01/Local-Storage/"/>
    <id>http://toddy.wang/2016/07/01/Local-Storage/</id>
    <published>2016-07-01T02:38:39.000Z</published>
    <updated>2017-10-27T09:31:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IndexedDB介绍"><a href="#IndexedDB介绍" class="headerlink" title="IndexedDB介绍"></a>IndexedDB介绍</h2><blockquote><p>IndexedDB是HTML5规范里新出现的浏览器里内置的数据库。对于在浏览器里存储数据，你可以使用cookies或local storage，但它们都是比较简单的技术，而IndexedDB提供了类似数据库风格的数据存储和使用方式。存储在IndexedDB里的数据是永久保存，不像cookies那样只是临时的。IndexedDB里提供了查询数据的功能，在online和offline模式下都能使用。你可以用IndexedDB存储大型数据。</p><p>IndexedDB里数据以对象的形式存储，每个对象都有一个key值索引。IndexedDB里的操作都是事务性的。一种对象存储在一个objectStore里，objectStore就相当于关系数据库里的表。<strong>IndexedDB</strong>可以有很多<strong>objectStore</strong>，<strong>objectStore</strong>里可以有很多对象。每个对象可以用key值获取。</p></blockquote><h2 id="IndexedDB-vs-LocalStorage"><a href="#IndexedDB-vs-LocalStorage" class="headerlink" title="IndexedDB vs LocalStorage"></a>IndexedDB vs LocalStorage</h2><blockquote><p><strong>IndexedDB</strong>和<strong>LocalStorage</strong>都是用来在浏览器里存储数据，但它们使用不同的技术，有不同的用途，你需要根据自己的情况适当的选择使用哪种。<strong>LocalStorage</strong>是用key-value键值模式存储数据，但跟<strong>IndexedDB</strong>不一样的是，它的数据并不是按对象形式存储。它存储的数据都是字符串形式。如果你想让<strong>LocalStorage</strong>存储对象，你需要借助<strong>JSON.stringify()</strong>能将对象变成字符串形式，再用<strong>JSON.parse()</strong>将字符串还原成对象。但如果要存储大量的复杂的数据，这并不是一种很好的方案。毕竟，<strong>localstorage</strong>就是专门为小数量数据设计的，它的api是<strong>同步</strong>的。</p><p>IndexedDB很适合存储大量数据，它的API是<strong>异步调用</strong>的。<strong>IndexedDB</strong>使用索引存储数据，各种数据库操作放在事务中执行。<strong>IndexedDB</strong>甚至还支持简单的数据类型。<strong>IndexedDB</strong>比<strong>localstorage</strong>强大得多，但它的API也相对复杂。</p><p>对于简单的数据，你应该继续使用<strong>localstorage</strong>，但当你希望存储大量数据时，<strong>IndexedDB</strong>会明显的更适合，<strong>IndexedDB</strong>能提供你更为复杂的查询数据的方式。</p></blockquote><h2 id="IndexedDB-vs-Web-SQL"><a href="#IndexedDB-vs-Web-SQL" class="headerlink" title="IndexedDB vs Web SQL"></a>IndexedDB vs Web SQL</h2><blockquote><p><strong>WebSQL</strong>也是一种在浏览器里存储数据的技术，跟<strong>IndexedDB</strong>不同的是，<strong>IndexedDB</strong>更像是一个<strong>NoSQL</strong>数据库，而<strong>WebSQL</strong>更像是<strong>关系型数据库</strong>，使用SQL查询数据。W3C已经不再支持这种技术。具体情况请看：<a href="http://www.w3.org/TR/webdatabase" target="_blank" rel="external">http://www.w3.org/TR/webdatabase/</a>。</p><p>因为不再支持，所以你就不要在项目中使用这种技术了。</p></blockquote><h2 id="IndexedDB-vs-Cookies"><a href="#IndexedDB-vs-Cookies" class="headerlink" title="IndexedDB vs Cookies"></a>IndexedDB vs Cookies</h2><blockquote><p><strong>Cookies(小甜点)</strong>听起来很好吃，但实际上并不是。每次HTTP接受和发送都会传递Cookies数据，它会占用额外的流量。例如，如果你有一个<strong>10KB</strong>的Cookies数据，发送10次请求，那么，总计就会有100KB的数据在网络上传输。<strong>Cookies</strong>只能是<strong>字符串</strong>。浏览器里存储Cookies的<strong>空间有限</strong>，很多用户禁止浏览器使用Cookies。所以，Cookies只能用来存储<strong>小量的非关键的</strong>数据。</p></blockquote><h2 id="IndexedDB的用法"><a href="#IndexedDB的用法" class="headerlink" title="IndexedDB的用法"></a>IndexedDB的用法</h2><blockquote><p>想要理解IndexedDB，最好的方法是创建一个简单的web应用：把一个班的学生的学号和姓名存储在IndexedDB里。IndexedDB里提供了简单的<strong>增、删、改、查</strong>接口。</p></blockquote><h2 id="打开一个IndexedDB数据库"><a href="#打开一个IndexedDB数据库" class="headerlink" title="打开一个IndexedDB数据库"></a>打开一个IndexedDB数据库</h2><blockquote><p>首先，你需要知道你的浏览器是否支持IndexedDB。请使用最新版的谷歌浏览器或火狐浏览器。低版本的IE是不行的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.indexedDB = <span class="built_in">window</span>.indexedDB || <span class="built_in">window</span>.mozIndexedDB || <span class="built_in">window</span>.webkitIndexedDB || <span class="built_in">window</span>.msIndexedDB;</div><div class="line"><span class="keyword">if</span>(!<span class="built_in">window</span>.indexedDB)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"你的浏览器不支持IndexedDB"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>一旦你的浏览器支持IndexedDB，我们就可以打开它。你不能直接打开IndexedDB数据库。IndexedDB需要你创建一个请求来打开它。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> request = <span class="built_in">window</span>.indexedDB.open(<span class="string">"testDB"</span>, <span class="number">2</span>);</div></pre></td></tr></table></figure></p><p>第一个参数是数据库的名称，第二个参数是数据库的版本号。版本号可以在升级数据库时用来调整数据库结构和数据。</p><p>但你增加数据库版本号时，会触发onupgradeneeded事件，这时可能会出现成功、失败和阻止事件三种情况。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> db;</div><div class="line">request.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"打开DB失败"</span>, event);</div><div class="line">&#125;</div><div class="line">request.onupgradeneeded   = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Upgrading"</span>);</div><div class="line">    db = event.target.result;</div><div class="line">    <span class="keyword">var</span> objectStore = db.createObjectStore(<span class="string">"students"</span>, &#123; <span class="attr">keyPath</span> : <span class="string">"rollNo"</span> &#125;);</div><div class="line">&#125;;</div><div class="line">request.onsuccess  = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"成功打开DB"</span>);</div><div class="line">    db = event.target.result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>onupgradeneeded事件在第一次打开页面初始化数据库时会被调用，或在当有版本号变化时。所以，你应该在onupgradeneeded函数里创建你的存储数据。如果没有版本号变化，而且页面之前被打开过，你会获得一个onsuccess事件。如果有错误发生时则触发onerror事件。如果你之前没有关闭连接，则会触发onblocked事件。</p><p>在上面的代码片段里，我们创建了一个Object Store，叫做“students”，用“rollNo”做数据键名。</p></blockquote><h2 id="往ObjectStore里新增对象"><a href="#往ObjectStore里新增对象" class="headerlink" title="往ObjectStore里新增对象"></a>往ObjectStore里新增对象</h2><blockquote><p>为了往数据库里新增数据，我们首先需要创建一个事务，并要求具有读写权限。在indexedDB里任何的存取对象的操作都需要放在事务里执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> transaction = db.transaction([<span class="string">"students"</span>],<span class="string">"readwrite"</span>);</div><div class="line">transaction.oncomplete = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Success"</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">transaction.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Error"</span>);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> objectStore = transaction.objectStore(<span class="string">"students"</span>);</div><div class="line"></div><div class="line">objectStore.add(&#123;<span class="attr">rollNo</span>: rollNo, <span class="attr">name</span>: name&#125;);</div></pre></td></tr></table></figure></p></blockquote><h2 id="从ObjectStore里删除对象"><a href="#从ObjectStore里删除对象" class="headerlink" title="从ObjectStore里删除对象"></a>从ObjectStore里删除对象</h2><blockquote><p>删除跟新增一样，需要创建事务，然后调用删除接口，通过key删除对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.transaction([<span class="string">"students"</span>],<span class="string">"readwrite"</span>).objectStore(<span class="string">"students"</span>).delete(rollNo);</div></pre></td></tr></table></figure></p><p>我把语句合并到了一起，变得更简单，但效果是一样的。</p></blockquote><h2 id="通过key取出对象"><a href="#通过key取出对象" class="headerlink" title="通过key取出对象"></a>通过key取出对象</h2><blockquote><p>往get()方法里传入对象的key值，取出相应的对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> request = db.transaction([<span class="string">"students"</span>],<span class="string">"readwrite"</span>).objectStore(<span class="string">"students"</span>).get(rollNo);</div><div class="line">request.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Name : "</span>+request.result.name);    </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p></blockquote><h2 id="更新一个对象"><a href="#更新一个对象" class="headerlink" title="更新一个对象"></a>更新一个对象</h2><blockquote><p>为了更新一个对象，首先要把它取出来，修改，然后再放回去。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> transaction = db.transaction([<span class="string">"students"</span>],<span class="string">"readwrite"</span>);</div><div class="line"><span class="keyword">var</span> objectStore = transaction.objectStore(<span class="string">"students"</span>);</div><div class="line"><span class="keyword">var</span> request = objectStore.get(rollNo);</div><div class="line">request.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Updating : "</span>+request.result.name + <span class="string">" to "</span> + name);</div><div class="line">    request.result.name = name;</div><div class="line">    objectStore.put(request.result);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p></blockquote><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><blockquote><p>为大家更加好的了解整体，下面贴出完整代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">window</span>.indexedDB = <span class="built_in">window</span>.indexedDB || <span class="built_in">window</span>.mozIndexedDB || <span class="built_in">window</span>.webkitIndexedDB || <span class="built_in">window</span>.msIndexedDB;</div><div class="line">    <span class="keyword">var</span> request, db;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">window</span>.indexedDB) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Your Browser does not support IndexedDB"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        request = <span class="built_in">window</span>.indexedDB.open(<span class="string">"testDB"</span>, <span class="number">2</span>);</div><div class="line">        request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"Error opening DB"</span>, event);</div><div class="line">        &#125;;</div><div class="line">        request.onupgradeneeded = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"Upgrading"</span>);</div><div class="line">            db = event.target.result;</div><div class="line">            <span class="keyword">var</span> objectStore = db.createObjectStore(<span class="string">"students"</span>, &#123;<span class="attr">keyPath</span>: <span class="string">"rollNo"</span>&#125;);</div><div class="line">        &#125;;</div><div class="line">        request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"Success opening DB"</span>);</div><div class="line">            db = event.target.result;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $(<span class="string">"#addBtn"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> name = $(<span class="string">"#name"</span>).val();</div><div class="line">        <span class="keyword">var</span> rollNo = $(<span class="string">"#rollno"</span>).val();</div><div class="line"></div><div class="line">        <span class="keyword">var</span> transaction = db.transaction([<span class="string">"students"</span>], <span class="string">"readwrite"</span>);</div><div class="line">        transaction.oncomplete = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"Success :)"</span>);</div><div class="line">            $(<span class="string">"#result"</span>).html(<span class="string">"Add : Success"</span>);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        transaction.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"Error :("</span>);</div><div class="line">            $(<span class="string">"#result"</span>).html(<span class="string">"Add : Error"</span>);</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">var</span> objectStore = transaction.objectStore(<span class="string">"students"</span>);</div><div class="line"></div><div class="line">        objectStore.add(&#123;<span class="attr">rollNo</span>: rollNo, <span class="attr">name</span>: name&#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    $(<span class="string">"#removeBtn"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> rollNo = $(<span class="string">"#rollno"</span>).val();</div><div class="line">        db.transaction([<span class="string">"students"</span>], <span class="string">"readwrite"</span>).objectStore(<span class="string">"students"</span>).delete(rollNo);</div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">"#getBtn"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> rollNo = $(<span class="string">"#rollno"</span>).val();</div><div class="line">        <span class="keyword">var</span> request = db.transaction([<span class="string">"students"</span>], <span class="string">"readwrite"</span>).objectStore(<span class="string">"students"</span>).get(rollNo);</div><div class="line">        request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">            $(<span class="string">"#result"</span>).html(<span class="string">"Name : "</span> + request.result.name);</div><div class="line">        &#125;;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    $(<span class="string">"#updateBtn"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> rollNo = $(<span class="string">"#rollno"</span>).val();</div><div class="line">        <span class="keyword">var</span> name = $(<span class="string">"#name"</span>).val();</div><div class="line">        <span class="keyword">var</span> transaction = db.transaction([<span class="string">"students"</span>], <span class="string">"readwrite"</span>);</div><div class="line">        <span class="keyword">var</span> objectStore = transaction.objectStore(<span class="string">"students"</span>);</div><div class="line">        <span class="keyword">var</span> request = objectStore.get(rollNo);</div><div class="line">        request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">            $(<span class="string">"#result"</span>).html(<span class="string">"Updating : "</span> + request.result.name + <span class="string">" to "</span> + name);</div><div class="line">            request.result.name = name;</div><div class="line">            objectStore.put(request.result);</div><div class="line">        &#125;;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p><a href="https://tc-flight-int-web.github.io/localstorage-ppt/" target="_blank" rel="external">PPT演示地址</a>;<a href="https://tc-flight-int-web.github.io/localstorage-demo" target="_blank" rel="external">DEMO演示地址</a>。如果有任何的问题，请留言。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;IndexedDB介绍&quot;&gt;&lt;a href=&quot;#IndexedDB介绍&quot; class=&quot;headerlink&quot; title=&quot;IndexedDB介绍&quot;&gt;&lt;/a&gt;IndexedDB介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;IndexedDB是HTML5规范里新出现
      
    
    </summary>
    
    
      <category term="技术文档" scheme="http://toddy.wang/tags/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>Hexo书写博客</title>
    <link href="http://toddy.wang/2016/06/23/Hexo%E4%B9%A6%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <id>http://toddy.wang/2016/06/23/Hexo书写博客/</id>
    <published>2016-06-23T01:12:39.000Z</published>
    <updated>2017-10-27T09:31:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>A fast, simple &amp; powerful blog framework, powered by <a href="http://nodejs.org" target="_blank" rel="external">Node.js</a>.</p><h2 id="工具推荐"><a href="#工具推荐" class="headerlink" title="工具推荐"></a>工具推荐</h2><ul><li>WebStorm</li><li>Visual Studio Code</li><li>MarkdownPad</li></ul><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h5 id="1-首先得有Node-js"><a href="#1-首先得有Node-js" class="headerlink" title="1. 首先得有Node.js."></a>1. 首先得有<a href="http://nodejs.org" target="_blank" rel="external">Node.js</a>.</h5><h5 id="2-其次全局安装hexo"><a href="#2-其次全局安装hexo" class="headerlink" title="2. 其次全局安装hexo"></a>2. 其次全局安装hexo</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo</div></pre></td></tr></table></figure><h5 id="3-git-clone-克隆配置完好的Hexo环境"><a href="#3-git-clone-克隆配置完好的Hexo环境" class="headerlink" title="3. git clone 克隆配置完好的Hexo环境"></a>3. git clone 克隆配置完好的Hexo环境</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git@github.com:TC-Flight-Int-Web/blog.git</div><div class="line">$ <span class="built_in">cd</span> blog</div><div class="line">$ git pull origin master //获取最新的代码，防止冲突，搞掉其他人文章</div></pre></td></tr></table></figure><blockquote><p>记住一定要<strong>获取最新的代码</strong></p></blockquote><h5 id="4-进入对应目录-安装对应依赖包"><a href="#4-进入对应目录-安装对应依赖包" class="headerlink" title="4. 进入对应目录,安装对应依赖包"></a>4. 进入对应目录,安装对应依赖包</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> blog</div><div class="line">$ npm install</div></pre></td></tr></table></figure><h5 id="5-创建一篇文章"><a href="#5-创建一篇文章" class="headerlink" title="5. 创建一篇文章"></a>5. 创建一篇文章</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"Hello Hexo"</span></div><div class="line">$ INFO  Created: [绝对路径]\blog\<span class="built_in">source</span>\_posts\hello-hexo.md</div></pre></td></tr></table></figure><h5 id="6-本地书写文章打开对应目录文件"><a href="#6-本地书写文章打开对应目录文件" class="headerlink" title="6. 本地书写文章打开对应目录文件"></a>6. 本地书写文章打开对应目录文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ 打开对应目录文件【[绝对路径]\blog\<span class="built_in">source</span>\_posts\hello-hexo.md】</div></pre></td></tr></table></figure><h5 id="7-打开markdown，默认情况"><a href="#7-打开markdown，默认情况" class="headerlink" title="7. 打开markdown，默认情况"></a>7. 打开markdown，默认情况</h5><p><img src="/img/王阳/img1.png" alt="markdown默认情况"></p><blockquote><ul><li>title 文章标题</li><li>date 发布时间</li><li>tags 标签</li><li>author 作者</li></ul></blockquote><h5 id="8-markdown语法书写"><a href="#8-markdown语法书写" class="headerlink" title="8. markdown语法书写"></a>8. markdown语法书写</h5><p><img src="/img/王阳/img2.png" alt=""></p><ul><li>添加图片统一路径<br>  <img src="/img/王阳/img3.png" alt="保存图片路径"> </li><li>图片添加的语法<br>  <img src="/img/王阳/img4.png" alt="图片markdown语法"></li></ul><h5 id="9-启动Hexo-Server-本地查看"><a href="#9-启动Hexo-Server-本地查看" class="headerlink" title="9. 启动Hexo Server 本地查看"></a>9. 启动Hexo Server 本地查看</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div><div class="line">$ INFO  Start processing</div><div class="line">$ INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure><h5 id="10-发布文章"><a href="#10-发布文章" class="headerlink" title="10. 发布文章"></a>10. 发布文章</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ hexo clean //清除缓存</div><div class="line">$ hexo d</div><div class="line">$ INFO  Deploying: git</div><div class="line">$ INFO  Clearing .deploy_git folder...</div><div class="line">$ INFO  Copying files from public folder...</div><div class="line">$ INFO  Deploy <span class="keyword">done</span>: git</div></pre></td></tr></table></figure><blockquote><ul><li>发布执行请先hexo clean 清除发布历史数据</li><li>目前发布文章需要手动输入github用户名和密码进行发布</li></ul></blockquote><h5 id="11-提交代码，防止其他人搞掉你的文章"><a href="#11-提交代码，防止其他人搞掉你的文章" class="headerlink" title="11. 提交代码，防止其他人搞掉你的文章"></a>11. 提交代码，防止其他人搞掉你的文章</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git pull origin master</div><div class="line">$ git add .</div><div class="line">$ git commit -m <span class="string">"文章书写"</span></div><div class="line">$ git push origin master</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hexo简介&quot;&gt;&lt;a href=&quot;#Hexo简介&quot; class=&quot;headerlink&quot; title=&quot;Hexo简介&quot;&gt;&lt;/a&gt;Hexo简介&lt;/h2&gt;&lt;p&gt;A fast, simple &amp;amp; powerful blog framework, powered 
      
    
    </summary>
    
    
      <category term="技术文档" scheme="http://toddy.wang/tags/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>webpack从入门到精通（一）</title>
    <link href="http://toddy.wang/2016/06/17/1.%5Breading%5Dwebpack%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://toddy.wang/2016/06/17/1.[reading]webpack从入门到精通（一）/</id>
    <published>2016-06-17T10:23:44.000Z</published>
    <updated>2017-11-07T07:52:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h2><p>事实上它是一个打包工具，而不是像RequireJS或SeaJS这样的模块加载器，通过使用Webpack，能够像Node.js一样处理依赖关系，然后解析出模块之间的依赖，将代码打包</p><h2 id="webpack安装步骤"><a href="#webpack安装步骤" class="headerlink" title="webpack安装步骤"></a>webpack安装步骤</h2><ol><li>首先得有Node.js</li><li><p>其次全局安装webpack</p><pre><code>npm install -g webpack</code></pre></li><li><p>在项目目录中安装webpack和插件</p><pre><code>npm install —save-dev webpack</code></pre></li><li><p>配置webpack</p></li></ol><h2 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h2><p>默认使用webpack.config.js</p><pre><code>var path = require(&apos;path&apos;);module.exports = {    entry:&apos;./jsx/app.jsx&apos;,    output:{        path: path.join(__dirname , &quot;/build&quot;),        filename:&apos;app.js&apos;    },    module:{        loaders:[            {                test:/\.(js|jsx)$/,                loaders:[&apos;babel&apos;],                exclude:[path.join(__dirname , &quot;/build&quot;)]            }        ]    }};</code></pre><p>其中<em>entry</em>是入口文件，<em>output</em>是编译后输出文件，<em>module</em>中<em>loaders</em>是解析操作</p><p>##未完待续</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是webpack&quot;&gt;&lt;a href=&quot;#什么是webpack&quot; class=&quot;headerlink&quot; title=&quot;什么是webpack&quot;&gt;&lt;/a&gt;什么是webpack&lt;/h2&gt;&lt;p&gt;事实上它是一个打包工具，而不是像RequireJS或SeaJS这样的模块加载
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://toddy.wang/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>小T有话说</title>
    <link href="http://toddy.wang/2016/04/20/2016-04-20/"/>
    <id>http://toddy.wang/2016/04/20/2016-04-20/</id>
    <published>2016-04-20T05:42:38.000Z</published>
    <updated>2017-10-27T09:31:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每一篇文章都是积累"><a href="#每一篇文章都是积累" class="headerlink" title="每一篇文章都是积累"></a>每一篇文章都是积累</h2><p>做一场冒险的表演，当你没有事情做的时候，想想你真的没有事情了吗？很多人可能在没有事情做的时候会想起自己在这个社会中还有什么价值。还有什么意义，我只能对这件事情下个结论，纯属扯淡。每个人都会有自己的烦恼和想法，但是我们不能因为这些事情而影响自己的心情和做的什么。应该做什么。<br>我们常说不管我们在什么地方都不要忘记了学习，大家就应该知道学习和自我提升的重要性。<br><img src="/img/2016/04/20/flighting.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;每一篇文章都是积累&quot;&gt;&lt;a href=&quot;#每一篇文章都是积累&quot; class=&quot;headerlink&quot; title=&quot;每一篇文章都是积累&quot;&gt;&lt;/a&gt;每一篇文章都是积累&lt;/h2&gt;&lt;p&gt;做一场冒险的表演，当你没有事情做的时候，想想你真的没有事情了吗？很多人可能在没有事情
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://toddy.wang/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>同程机票，不一样的体验</title>
    <link href="http://toddy.wang/2016/04/19/2016-04-19/"/>
    <id>http://toddy.wang/2016/04/19/2016-04-19/</id>
    <published>2016-04-19T08:42:51.000Z</published>
    <updated>2017-10-27T09:31:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回首第一次"><a href="#回首第一次" class="headerlink" title="回首第一次"></a>回首第一次</h2><p>第一次来同程的时候，感觉整个人还是挺不错的，在一个新的环境中来，可以得到很多的东西，记得第一次看见同程的大楼，还以为以后自己就会在这里工作还是挺高大上的，但是后面才知道我所在的事业部不会到新大楼去，还是有点遗憾的。可以给大家看看同程新大楼的雄伟样子，当初来这里的时候，其实很大一部分，还是很想进去的，但是在最后还是没有进去。给大家欣赏下图片。哈哈。<br><img src="/img/2016/04/19/ly.jpg" alt=""></p><h2 id="同程机票"><a href="#同程机票" class="headerlink" title="同程机票"></a>同程机票</h2><p>在后来就进入部门，机票事业部，感觉开始很长的一段时间都会在机票事业部里面度过了，从毕业开始基本上就是在机票这个行业里面摸爬滚打，这里可以谈谈同程的机票事业部的情况，基本分为国内机票和国际机票，最近又划分了一个智慧出行，主要做机票相关的其他服务。来到前端组，对前端的东西进行研究，主要分为无线和pc，无线中主要的来源是微信，也就是说基本上每天的票量都来自微信，比较依赖于微信，而微信这个机票平台，也是因为腾讯投资之后才开放的，总共购买了5年，其实太依赖于某个平台其实并不是很好，总有一天你会被其他人取代，所以，同程人也在想很多方法进行引流，希望能在自己的app上能有所收获，记得之前公司也在做app，但是整体效果就是不一样，基本同一个时间做的app，但是最后的效果就完全不一样，只是觉得还是有资金的都是老大，做什么都很快很给力，现在的同程已经部署当年那个向前冲的团队了，这个团队需要更多的规范和套路来推进，所以，需要引进大量的人才。机票事业部基本上很多东西都没有，进来巧合的先去了国内机票听了下国内机票的项目培训，了解了国内机票的整体情况，很多东西都还是处于亏损状态，还是有很大的挑战空间，如果能把这部分的亏损换成不亏损，就是间接的盈利。国际机票就更加的简单。刚刚没有成立多久，但是很有挑战力，所以后来选择来到了国际机票，国际票这边感觉和国内简直是两个世界。这个两个世界我会在后面提到。</p><h2 id="两个世界的机票"><a href="#两个世界的机票" class="headerlink" title="两个世界的机票"></a>两个世界的机票</h2><p>可能是国内和国际本质上面的不同，国际机票在开发的流程和国内机票选择不同的方式，国内的开发用的jira，国际为了不同用的tapd，这两个版本控制个人觉得是没有什么区别的，都属于敏捷开发模型中的一个产物，但是在使用的过程中，就不得不吐槽。基本上是由组长查看，然后分配，完全把这个工具用成了需求传递的一个东西，为了看整体数据的存在。</p><p>如果你知道在敏捷一定会知道故事墙，这个墙上面有各种你需要完成的需求点，每个开发人员需要在上面取自己想做的一些卡片，最后再一步一步的在卡墙上面进行托动。之前在一家敏捷做的很好的外企待过，所以，对于现在的这种模式表示很不理解。其实很多公司都在用敏捷，我承认每家公司不一样，但是，个人觉得还是要有相应的方式。如果想了解敏捷可以去谷歌。也给大家推荐一个文章<a href="http://www.wtoutiao.com/p/pc65Nw.html" target="_blank" rel="external">京麦敏捷团队</a>.</p><h2 id="好的产品是需要方向"><a href="#好的产品是需要方向" class="headerlink" title="好的产品是需要方向"></a>好的产品是需要方向</h2><p>记得之前给事业部的产品发过一封邮件，但是没有得到很好的重视，我是一个比较喜欢挑战的人，不喜欢做其他人都在做的事情，如果做产品，你还是在老的东西上面寻求不变的话，那么我想你的用户为什么来，我知道对于同程来说，基本上很多东西都已经稳定了，但是没有一个人重视我的个人想法，随时老大找我沟通过，但是还是在给我传各种原因和因素。这些需求不能做，让我想起来同程的时候公司老总的事迹，同程老总<a href="http://it.sohu.com/20140304/n396033550.shtml" target="_blank" rel="external">吴志祥</a>(一篇老总的文章)，当初在阿里的时候也给马总提过一个大家不理解想法，虽然我个人感觉，我的想法是没有吴老板这样的大，但是我的点也是自己想出来的，也谈不上好，谈不上差，就是希望上面的人能好好的研究下，后面感觉就是没有人管你。</p><h2 id="如何做好机票，个人的拙见"><a href="#如何做好机票，个人的拙见" class="headerlink" title="如何做好机票，个人的拙见"></a>如何做好机票，个人的拙见</h2><p>未完待续。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;回首第一次&quot;&gt;&lt;a href=&quot;#回首第一次&quot; class=&quot;headerlink&quot; title=&quot;回首第一次&quot;&gt;&lt;/a&gt;回首第一次&lt;/h2&gt;&lt;p&gt;第一次来同程的时候，感觉整个人还是挺不错的，在一个新的环境中来，可以得到很多的东西，记得第一次看见同程的大楼，还以为
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://toddy.wang/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
